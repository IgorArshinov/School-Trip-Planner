// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using SchoolTripPlanner.Data.Persistence;

namespace SchoolTripPlanner.Data.Migrations
{
    [DbContext(typeof(ToddlerScanContext))]
    [Migration("20191009195307_ChangedScanProperties")]
    partial class ChangedScanProperties
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToddlerScan.Domain.Models.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.Scan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("SchoolTripId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SchoolTripId");

                    b.ToTable("Scans");
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.ScanToddler", b =>
                {
                    b.Property<long>("ToddlerId");

                    b.Property<long>("ScanId");

                    b.Property<bool>("ToddlerIsScanned");

                    b.HasKey("ToddlerId", "ScanId");

                    b.HasIndex("ScanId");

                    b.ToTable("ScanToddlers");
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.SchoolTrip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDateTime");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<long>("TeacherId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("SchoolTrips");
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.SchoolTripToddler", b =>
                {
                    b.Property<long>("SchoolTripId");

                    b.Property<long>("ToddlerId");

                    b.HasKey("SchoolTripId", "ToddlerId");

                    b.HasIndex("ToddlerId");

                    b.ToTable("SchoolTripToddlers");
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastModified");

                    b.Property<string>("Name");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Surname");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.Toddler", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ClassId");

                    b.Property<string>("Name");

                    b.Property<string>("QRCode");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Toddlers");
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.Scan", b =>
                {
                    b.HasOne("ToddlerScan.Domain.Models.SchoolTrip", "SchoolTrip")
                        .WithMany("Scans")
                        .HasForeignKey("SchoolTripId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.ScanToddler", b =>
                {
                    b.HasOne("ToddlerScan.Domain.Models.Scan", "Scan")
                        .WithMany("ScanToddlers")
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ToddlerScan.Domain.Models.Toddler", "Toddler")
                        .WithMany()
                        .HasForeignKey("ToddlerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.SchoolTrip", b =>
                {
                    b.HasOne("ToddlerScan.Domain.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.SchoolTripToddler", b =>
                {
                    b.HasOne("ToddlerScan.Domain.Models.SchoolTrip", "SchoolTrip")
                        .WithMany("SchoolTripToddlers")
                        .HasForeignKey("SchoolTripId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ToddlerScan.Domain.Models.Toddler", "Toddler")
                        .WithMany()
                        .HasForeignKey("ToddlerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ToddlerScan.Domain.Models.Toddler", b =>
                {
                    b.HasOne("ToddlerScan.Domain.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
